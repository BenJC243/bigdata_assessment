import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn import linear_model, preprocessing
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn import feature_selection#, metrics

  #DIAGNOSIS TYPE CATEGORIES
ls = list(df['diag_1'])
def diag_1(df):
    for i, x in enumerate(df['diag_1']):
        v = str(x)
        if v[0].isalpha():
            ls[i] = v.replace(v,'other')
        elif v[0].isdigit():
            s = float(v)
            if (s > 390 and s < 460) or s == 785:#s in range(390, 460):
                p = str(s)
                ls[i] = p.replace(p,'circulatory_disease')
            elif s > 249.99 and s < 251:
                p = str(s)
                ls[i] = p.replace(p,'diabetes_mellitus')
            elif (s > 459 and s < 520) or s == 786:
                p = str(s)
                ls[i] = p.replace(p,'respiratory_disease')
            elif (s > 519 and s < 580) or s == 787:
                p = str(s)
                ls[i] = p.replace(p,'gastrointestinal_disease')
            elif (s > 799 and s < 1000):
                p = str(s)
                ls[i] = p.replace(p,'injury/poisoning')
            elif (s > 709 and s < 740):
                p = str(s)
                ls[i] = p.replace(p,'musculoskeletal/connective')
            elif (s > 579 and s < 740):
                p = str(s)
                ls[i] = p.replace(p,'genitourinary')
            elif (s > 139 and s < 240):
                p = str(s)
                ls[i] = p.replace(p,'neoplasms')
            else:
                p = str(s)
                ls[i] = p.replace(p,'other')                

    df['diag_1'] = ls
    return df['diag_1']

df['diag_1'] = diag_1(df)

ls1 = list(df['diag_2'])
def diag_2(df):
    for i, x in enumerate(df['diag_2']):
        v = str(x)
        if v[0].isalpha():
            ls1[i] = v.replace(v,'other')
        elif v[0].isdigit():
            s = float(v)
            if (s > 390 and s < 460) or s == 785:#s in range(390, 460):
                p = str(s)
                ls1[i] = p.replace(p,'circulatory_disease')
            elif s > 249.99 and s < 251:
                p = str(s)
                ls[i] = p.replace(p,'diabetes_mellitus')
            elif (s > 459 and s < 520) or s == 786:
                p = str(s)
                ls1[i] = p.replace(p,'respiratory_disease')
            elif (s > 519 and s < 580) or s == 787:
                p = str(s)
                ls1[i] = p.replace(p,'gastrointestinal_disease')
            elif (s > 799 and s < 1000):
                p = str(s)
                ls1[i] = p.replace(p,'injury/poisoning')
            elif (s > 709 and s < 740):
                p = str(s)
                ls1[i] = p.replace(p,'musculoskeletal/connective')
            elif (s > 579 and s < 740):
                p = str(s)
                ls1[i] = p.replace(p,'genitourinary')
            elif (s > 139 and s < 240):
                p = str(s)
                ls1[i] = p.replace(p,'neoplasms')
            else:
                p = str(s)
                ls1[i] = p.replace(p,'other')                

    df['diag_2'] = ls
    return df['diag_2']

df['diag_2'] = diag_2(df)

ls2 = list(df['diag_3'])
def diag_3(df):
    for i, x in enumerate(df['diag_3']):
        v = str(x)
        if v[0].isalpha():
            ls1[i] = v.replace(v,'other')
        elif v[0].isdigit():
            s = float(v)
            if (s > 390 and s < 460) or s == 785:#s in range(390, 460):
                p = str(s)
                ls2[i] = p.replace(p,'circulatory_disease')
            elif s > 249.99 and s < 251:
                p = str(s)
                ls2[i] = p.replace(p,'diabetes_mellitus')
            elif (s > 459 and s < 520) or s == 786:
                p = str(s)
                ls2[i] = p.replace(p,'respiratory_disease')
            elif (s > 519 and s < 580) or s == 787:
                p = str(s)
                ls2[i] = p.replace(p,'gastrointestinal_disease')
            elif (s > 799 and s < 1000):
                p = str(s)
                ls2[i] = p.replace(p,'injury/poisoning')
            elif (s > 709 and s < 740):
                p = str(s)
                ls2[i] = p.replace(p,'musculoskeletal/connective')
            elif (s > 579 and s < 740):
                p = str(s)
                ls2[i] = p.replace(p,'genitourinary')
            elif (s > 139 and s < 240):
                p = str(s)
                ls2[i] = p.replace(p,'neoplasms')
            else:
                p = str(s)
                ls2[i] = p.replace(p,'other')                

    df['diag_3'] = ls
    return df['diag_3']
df['diag_3'] = diag_3(df)

#print(df['diag_1'])
#print(df['diag_2'])
#print(df['diag_3'])

  #AGE and READMISSION
df['age'] = df['age'].astype('int')
def readmission_hists(df, plot_cols, grid_col):
    for col in plot_cols:
        #if (col != 'encounter_id' and col != 'patient_nbr'):
        if col == 'age':
            g = sns.FacetGrid(df, col=grid_col, margin_titles=True)
            g.map(plt.hist, col)
            plt.show()
readmission_hists (df, df.select_dtypes(include=[np.number]).columns, "readmitted")

from matplotlib import pyplot as plt
import seaborn as sns
#df['age'] = df['age'].astype('int')

df['readmitted'] = df['readmitted'].replace({'>30':'1', '<30':'1', 'NO': '0'})

  #DUMMY COLS
dum_cols=['gender', 'race']
dummies=pd.get_dummies(df, columns=dum_cols)#prefix='sex')#df1,columns = df['gender'],prefix='sex')#,prefix='sex')
#column_name=df1.columns.values.tolist()
df = pd.concat([df, dummies], axis = 1)
df = df.loc[:,~df.columns.duplicated()]

  #READMISSION VS. FEATURES
ls3=[]
for i, j in zip(list(df['readmitted']), list(df['gender_Male'])):
    if int(i) == int(j):
        ls3.append(i)
#print(len(ls3))
print(ls3.count('1'), 'male') # = num of men readmitted
#print(ls3.count('0'))

ls4=[]
for i, j in zip(list(df['readmitted']), list(df['gender_Female'])):
    if int(i) == int(j):
        ls4.append(i)
print(ls4.count('1'), 'female')

ls5=[]

for i, j in zip(list(df['readmitted']), list(df['race_Caucasian'])):
    if int(i) == int(j):
        ls5.append(i)
print(ls5.count('1'), 'cauc')

ls6=[]
for i, j in zip(list(df['readmitted']), list(df['race_AfricanAmerican'])):
    if int(i) == int(j):
        ls6.append(i)
print(ls6.count('1'), 'african-americ')

ls7=[]
for i, j in zip(list(df['readmitted']), list(df['race_Asian'])):
    if int(i) == int(j):
        ls7.append(i)
print(ls7.count('1'), 'asian')

ls8=[]
for i, j in zip(list(df['readmitted']), list(df['race_Hispanic'])):
    if int(i) == int(j):
        ls8.append(i)
print(ls8.count('1'), 'hispanic')


#print(df['gender'].value_counts())
print(df['gender_Male'].value_counts())
print(df['gender_Female'].value_counts())
print(df['race_Caucasian'].value_counts())
print(df['race_AfricanAmerican'].value_counts())
print(df['race_Asian'].value_counts())


    #normalised
x = ['Male', 'Female']
y = [3203 / 8741, 3796 / 10139]
sns.barplot(x, y)
print(plt.show())

x = ['Caucasian', 'African-American','Asian','Hispanic']
y = [5496/14332, 1223/3701, 51/157, 113/360]

sns.barplot(x, y)
print(plt.show())
print(df['race_Hispanic'].value_counts())
